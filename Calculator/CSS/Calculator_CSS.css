html {
    font-size: 70%;
    box-sizing: border-box; /*makes it so the size specifications affect the entire box and not just the content portion (padding and border will not affect it any longer...the border box property means when you specify box is 300px wide it will remain so regardless of padding or border--which is NOT the case by default. */
}

*, *::before, *::after {/*before and after is supposed to place content before or after a given element...typically you'd write p::before to place something before the p element or after it p::after...the * refers to the entire HTML doc*/
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

.calculator {
    border: 1.2px solid rgb(166, 30, 207);
    border-radius: 7px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);/* moves the calculator -50% in X direction and -50% in Y direction...needed because for w/e reason top 50% and left 50% actually moves the entire thing to the bottom right of the screen without this translation */
    width: 500px;
}

.calculator-screen {
    width: 100%;
    font-size: 5rem;
    height: 80px;
    border: none;
    background-color: black;
    color: white;
    text-align: right;
    padding-right: 20px;
    padding-left: 20px;
    border-radius: 7px 7px 0px 0px;
}

button {
    height: 70px;
    border-radius: 3px;
    border: 1px solid darkslategray;
    background-color: transparent;
    font-size: 3.2rem;
    color: rgb(49, 184, 8);
    background-image: linear-gradient(to bottom, transparent, transparent 50%, rbga(0,0,0,0.06));
    text-shadow: 0 1px rbga(255,255,255,0.4);
    box-shadow: inset 0 0 0 1px rbga(255,255,255,0.05), inset 0 1px 0 0 rgba(255,255,255,0.05), inset 0 -1px 0 0 rbga(255,255,255,0.05), 0 1px 0 0 rgba(255,255,255,0.05);
}

button:hover {
    background-color: #e1e1e1;
}

.operator {
    color: black;
    background-image: linear-gradient(to bottom, transparent, transparent 50%, rbga(0,0,0,0.5));
    background-color: lightgray;
}

.all-clear {
    background-color: rgb(255, 0, 234);
    border-color: darkslategray;
    color: #fff;
}

.all-clear:hover {
    background-color: darkred;
}

.equal-sign {
    background-color: blue;
    border-color: darkslategray;
    color: #fff;
    height: 100%;
    grid-area: 2 / 4 / span 4 / span 1;/*The syntax is grid-row-start / grid-column-start / grid-row-end / grid-column-end. The .equal-sign item will start row 2, column 4, and span 4 rows and span 1 columns.*/
}

.equal-sign:hover {
    background-color: darkblue;
}
 
.calculator-keys {
    display: grid;/*makes it appears as grid*/
    grid-template-columns: repeat(4, 1fr);/* repeat(4, 1fr) is stating it wants 4 columns with 1fr size each (repeat is used instead of writing 1 fr four times). fr means fraction and the number represents the numberator (1) while 4 (indicating # columns) is the denominator so each column is 1/4 of the total size of the container (or 25% per column).*/
    grid-gap: 20px;/*space between each 'tile' or 'square' of the grid*/
    padding: 20px;
}